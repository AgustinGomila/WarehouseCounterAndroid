plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlinVersion"
}

android {
    compileSdk = androidTargetSdk
    //// Esto sirve la actualizar el número de versión con cada compilación
    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()
    if (!versionPropsFile.exists()) {
        versionProps['VERSION_PATCH'] = "0"
        versionProps['VERSION_NUMBER'] = "0"
        versionProps['VERSION_BUILD'] = "-1"
        // I set it to minus one so the first build is 0 which isn't super important.
        versionProps.store(versionPropsFile.newWriter(), null)
    }
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if (':warehouseCounter:assembleRelease' in runTasks || ':warehouseCounter:bundleRelease' in runTasks) {
            value = 1
        }

        def versionMajor = 12
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.dacosys.warehouseCounterM12"
            minSdk = androidMinSdk
            targetSdk = androidTargetSdk

            versionCode = versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch} (${versionBuild})"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    buildTypes {
        debug {
            initWith debug
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            matchingFallbacks = ['debug']
        }
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        targetCompatibility jvmCompatibility
        sourceCompatibility jvmCompatibility
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/*']
        }
    }
    productFlavors {}
    buildToolsVersion = buildToolsVer
    kotlinOptions {
        jvmTarget = '1.8'
    }
    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        proguardFiles
        manifestPlaceholders = [:]
        targetSdk = androidTargetSdk
        minSdk = androidMinSdk
        multiDexEnabled true

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable = ['MissingTranslation']
    }
    namespace 'com.dacosys.warehouseCounter'
}

dependencies {
    // MultiDex
    implementation 'com.android.support:multidex:1.0.3'

    // Permite utilizar API restringidas no públicas del SDK
    implementation 'com.github.tiann:FreeReflection:3.1.0'
    implementation 'com.google.android.gms:play-services-basement:18.2.0'

    // Permite utilizar las librerías Zxing en API 23
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    // LeakCanary: debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    // Testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"

    // Constraint Layout
    // No update 2.0.1 (Bugs persist until 2.1.4),
    // Todas tienen un bug al finalizar una animación que no re-dibuja los fragmentos
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'

    // Keyboard Visibility Library
    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:2.3.0'

    // Apache Commons Net
    implementation 'commons-net:commons-net:3.8.0'

    // Android Asynchronous Http Client
    implementation 'com.loopj.android:android-async-http:1.4.11'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.2'

    // ImageControl
    implementation project(':imageControl')

    // Floating Camera Window
    implementation project(':easyfloat')

    // Jotter (Activity & fragment lifecycle listener)
    implementation project(':jotter')

    // Barcode Library
    implementation project(':zxing-android-embedded')

    // SplashScreen
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // Some AndroidX Libs
    implementation 'androidx.annotation:annotation:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.compose.animation:animation-core:1.6.0-alpha06'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'com.google.android.material:material:1.9.0'

    // SwipeR
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    // Para ActivityResults
    implementation 'androidx.activity:activity-ktx:1.8.0-rc01'
    implementation 'androidx.fragment:fragment-ktx:1.6.1'

    // Honeywell native driver
    implementation files('libs/honeywell/DataCollection.aar')

    // Koin
    implementation "io.insert-koin:koin-android:3.4.2"

    // Room
    api("androidx.room:room-runtime:$roomVersion")
    annotationProcessor("androidx.room:room-compiler:$roomVersion")
    implementation("androidx.room:room-ktx:$roomVersion")
    implementation('android.arch.persistence.room:runtime:1.1.1')
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // To use Kotlin annotation processing tool (kapt)
    kapt("android.arch.persistence.room:compiler:1.1.1")
    kapt("androidx.room:room-compiler:$roomVersion")

    // KTor
    implementation "io.ktor:ktor-client-okhttp-jvm:$kTorVersion"
    implementation "io.ktor:ktor-client-core:$kTorVersion"
    implementation "io.ktor:ktor-client-content-negotiation:$kTorVersion"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$kTorVersion"
    implementation "io.ktor:ktor-client-json:$kTorVersion"
    implementation "io.ktor:ktor-client-auth:$kTorVersion"

    // RecyclerView
    implementation 'androidx.recyclerview:recyclerview:1.3.1'

    // KotlinX Serialization
    runtimeOnly 'org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.5.1'

    // Arrows
    implementation "io.arrow-kt:arrow-core:1.1.3"

    // Paging3
    implementation 'androidx.paging:paging-common-ktx:3.2.1'
    implementation 'androidx.paging:paging-runtime-ktx:3.2.1'

    // .env Support
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/' }
}
